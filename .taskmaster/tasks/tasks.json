{
  "master": {
    "tasks": [],
    "metadata": {
      "created": "2025-10-11T06:05:34.976Z",
      "updated": "2025-10-12T05:40:58.976Z",
      "description": "Tasks for master context"
    }
  },
  "core-features": {
    "tasks": [
      {
        "id": 1,
        "title": "Token Management System (Backend)",
        "description": "Implement all token management endpoints (user token balance, transaction history, admin top-up) and signup bonus functionality.",
        "details": "- Implement DB hooks for user registration to credit 1,000 tokens and log a transaction.\n- Create endpoints: GET /api/tokens/balance, GET /api/tokens/history, POST /api/admin/tokens/topup.\n- Ensure atomic database transactions on balance updates.\n- Implement role-based auth for admin top-up.\n- Enforce non-negative balances and validate all token operations, logging every state change for auditing.\n- Pseudocode for signup bonus:\n```\nOn UserSignUpSuccess(userId):\n  Begin Transaction\n    Insert userTokens (userId, balance=1000)\n    Log tokenTransaction (userId, +1000, 'signup_bonus')\n  Commit\n```",
        "testStrategy": "Unit test token calculation and validation logic. Use integration tests for all API endpoints, including sign-up bonus trigger, balance retrieval, admin top-up, and negative balance handling. Verify the audit trail for every operation.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Gemini AI Service Integration",
        "description": "Build backend integration with Gemini Flash 2.5 Image API, including a service class, error handling, retry logic, and rate limiting.",
        "details": "- Implement GeminiService.js with methods: generateImage, editImage, composeImages, and styleTransfer.\n- Initialize and authenticate Google Generative AI client.\n- Handle base64 encoding/decoding of images, extract images and metadata from responses.\n- Implement retry logic (exponential backoff, up to 3 attempts).\n- Use express-rate-limit (Gemini: 15/min; overall: per-user and per-IP)\n- Log all errors with full context.\n- Enforce file validation (JPEG/PNG/WebP, <10MB, <4096x4096).\n- Pseudocode for API call with retry:\n```\nAttempt = 0\nwhile Attempt < 3:\n  try {\n    result = GeminiAPI.call(...)\n    return result\n  } catch (err) {\n    if transient && Attempt < 2: Attempt +=1; wait(backoff)\n    else: throw err\n  }\n```",
        "testStrategy": "Unit test the GeminiService for various scenarios including success, transient failure, and permanent error. Integration test with mock Gemini responses. Load test with rate limit thresholds.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Prompt Engineering and Template System",
        "description": "Implement prompt templates and template selection logic for image editing operations.",
        "details": "- Create promptTemplates.js with reusable strings for all core editing types (e.g., REMOVE_BACKGROUND, FLIP_HORIZONTAL).\n- Implement simple selection logic to match incoming editing requests to a template, filling params as needed.\n- Ensure templates meet Gemini best practices (clarity, product photography tone, <500 chars).\n- Sanitize user-generated prompts (remove scripts, validate length).\n- Pseudocode:\n```\nif request.action in templates:\n  prompt = templates[request.action].format(params)\nelse:\n  prompt = sanitize(request.prompt)\n```",
        "testStrategy": "Unit test all template functions, including parameterized cases. Test prompt sanitization for script/resource injection and edge cases.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Token Cost Calculator and Deduction Logic",
        "description": "Design backend logic for calculating operation costs, validating user balance, and deducting tokens.",
        "details": "- Implement TokenCostCalculator.js with a cost map for each operation type.\n- Expose methods: getOperationCost, validateBalance, deductTokens.\n- Ensure transactional deduction, rolling back on failure.\n- Integrate with logging and consistent error format (INSUFFICIENT_TOKENS, etc.).\n- Link deductions to references (generation, admin action).\n- Pseudocode:\n```\n// validateBalance\nif (getUserBalance(userId) >= cost) return OK; else throw Error('INSUFFICIENT_TOKENS')\n// deductTokens\nBegin Transaction\n  if balance >= cost\n    balance -= cost; logTransaction(...)\n  else throw\nCommit\n```",
        "testStrategy": "Unit and integration test deduction logic, including successful and insufficient balance cases, concurrency (no double deductions), rollback on failure.",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Image Generation & Editing Endpoints",
        "description": "Implement all /api/generate endpoints for text-to-image, editing (simple and complex), composition, style transfer, and quick actions.",
        "details": "- Build API endpoints as specified, calling GeminiService methods and using prompt templates and cost calculator.\n- Validate multipart image uploads for size, type, and dimensions.\n- For each request:\n  1. Validate balance\n  2. Create generation record (status: processing)\n  3. Enhance/sanitize prompt\n  4. Call Gemini\n  5. Upload result to storage\n  6. Update generation record (status, image reference)\n  7. Deduct tokens\n- For quick actions, use template mapping to construct prompt automatically.\n- All endpoints must return the specified response or consistent error format.\n- Soft watermark all outputs (SynthID, if API supports; else skip for MVP).\n- Pseudocode:\n```\nif validateInput(request):\n  checkBalance(userId, operationType)\n  createGeneration(status='processing')\n  prompt = getPrompt(request)\n  image = GeminiService.run(...)\n  upload(image); updateGeneration(status='completed')\n  deductTokens(userId, operationType, generationId)\n  return {imageUrl, tokensUsed, ...}\nelse return error",
        "testStrategy": "Full integration tests for all endpoints using real/mocked GeminiService. Test file validation errors, token deductions, prompt construction, and error responses. Scenario testing for success/failure.\nLoad test endpoints for rate limiting.",
        "priority": "high",
        "dependencies": [
          2,
          3,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Project Management Endpoints (CRUD)",
        "description": "Implement backend endpoints for users to create, manage, and organize projects and link generations.",
        "details": "- Build REST endpoints: list, create, update, delete (soft), and details for user projects (/api/projects).\n- Ensure auth and ACL: only allow user to manage their own projects.\n- For details endpoint, include all linked generations and aggregate stats (tokens spent, total generations).\n- Image counts and project linking should update dynamically as generations are added.\n- Soft delete via status='deleted', no data loss.\n- Pseudocode:\n```\nProjectController:\n  createProject(user, body): insert project(userId, ...)\n  getProjects(user, filters): findAll by userId\n  getProjectDetails(user, projectId): project + generations\n  updateProject(user, pid, ...): patch/validate ownership\n  deleteProject(user, pid): set status=deleted\n```",
        "testStrategy": "Integration test all CRUD endpoints. Test authorization, project creation, linking/delinking generations, soft-delete logic, and stats updates. Verify foreign key and ownership constraints.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Generation and Usage History APIs",
        "description": "Implement endpoints for listing generations, filtering, and retrieving generation/generation history details.",
        "details": "- Implement GET /api/generations (filters: projectId, operationType, status, pagination, sort) and GET /api/generations/:id.\n- Link query to logged-in user only.\n- Support filtering, sorting by time/tokens.\n- Generation details should include all metadata and status.\n- Pagination and efficient DB queries for scalability.\n- Consistent error responses for all error scenarios.\n- Pseudocode:\n```\ngetGenerations(user, filters): select * where userId=... limit/offset orderBy\ngetGenerationDetails(user, id): select where userId/id\n```",
        "testStrategy": "Integration tests for listing and retrieving generations. Test all query params, sorting, filters, and edge cases (no results, not found, unauthorized). Load test for pagination.",
        "priority": "medium",
        "dependencies": [
          5,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Admin Panel APIs (Dashboard & User Management)",
        "description": "Implement minimal admin endpoints for system metrics and user management with strict admin role enforcement.",
        "details": "- Build GET /api/admin/stats for global aggregate stats, and GET /api/admin/users for user search/pagination with balance data.\n- Enforce role=admin for all access (middleware/auth checks).\n- All queries should be efficient and paginated.\n- Ensure metrics are accurate and update in real time, deriving from reliable underlying tables (users, tokens, generations).\n- Use consistent error handling for admin endpoints.\n- Structure logging for all admin actions.\n- Pseudocode:\n```\nif user.role != 'admin': reject\ngetStats(): sum tables\ngetUsers(query): paginated search, join on balances\n```",
        "testStrategy": "Integration and permission tests for all admin endpoints. Directly verify output with underlying DB. Test attempted access by non-admin users.",
        "priority": "medium",
        "dependencies": [
          1,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Token Management System",
        "description": "Implement complete token management system including signup bonus, balance API, transaction history, and admin top-up functionality. This is the foundation for all paid features.",
        "details": "Components to build:\n1. Signup bonus trigger (1,000 tokens on registration)\n2. GET /api/tokens/balance endpoint\n3. GET /api/tokens/history endpoint with pagination\n4. POST /api/admin/tokens/topup endpoint (admin only)\n5. TokenService class for balance operations\n6. Database transactions for token consistency\n7. Validation to prevent negative balances",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Gemini Service Integration",
        "description": "Build core Gemini AI service with prompt engineering templates for common image operations. This is the heart of the AI functionality.",
        "details": "Components:\n1. GeminiService.js - main service class\n2. Initialize Google Generative AI client\n3. Methods: generateImage(), editImage(), composeImages(), styleTransfer()\n4. promptTemplates.js - pre-built prompts for common operations\n5. Error handling with retry logic\n6. Rate limiting (15 req/min for free tier)\n7. Image encoding/decoding (base64)\n8. Extract image from Gemini response",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Image Generation Endpoints",
        "description": "Implement all core image generation and editing API endpoints that call Gemini service and handle token deduction.",
        "details": "Endpoints to build:\n1. POST /api/generate/text-to-image (100 tokens)\n2. POST /api/generate/edit-simple (100 tokens)\n3. POST /api/generate/edit-complex (150 tokens)\n4. POST /api/generate/compose (200 tokens)\n5. POST /api/generate/style-transfer (150 tokens)\n\nEach endpoint must:\n- Validate token balance\n- Create generation record\n- Call Gemini API\n- Upload result to storage\n- Deduct tokens\n- Return image URL + metadata",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Quick Actions Feature",
        "description": "Build convenient quick action shortcuts for common operations with pre-optimized prompts (remove background, flip, enhance lighting, etc).",
        "details": "Build:\n1. POST /api/generate/quick-action endpoint\n2. Action mapping: remove_background, flip_horizontal, enhance_lighting, add_shadows\n3. Pre-optimized prompt templates for each action\n4. All actions cost 100 tokens\n5. This is a wrapper around edit-simple with preset prompts",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Project Management System",
        "description": "Allow users to organize their image generations into projects for better workflow management.",
        "details": "Build CRUD endpoints:\n1. POST /api/projects - Create project\n2. GET /api/projects - List user projects with filters\n3. GET /api/projects/:id - Get project details with generations\n4. PATCH /api/projects/:id - Update project\n5. DELETE /api/projects/:id - Soft delete\n\nFeatures:\n- Link generations to projects\n- Show generation count per project\n- Calculate total tokens spent per project\n- Filter by status (active/archived/deleted)",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Generation History & Tracking",
        "description": "Build endpoints to view and filter all past image generation operations with detailed metadata.",
        "details": "Build:\n1. GET /api/generations - List with filters\n   - Filter by: projectId, operationType, status\n   - Sort by: createdAt, tokensUsed\n   - Pagination support\n2. GET /api/generations/:id - Get full generation details\n\nResponse includes:\n- Operation type and prompt used\n- Input/output image URLs\n- Tokens used\n- Processing time\n- Status and error messages (if failed)\n- AI metadata",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Conversational Editing Feature",
        "description": "Enable multi-turn iterative image editing where users can refine results through conversation (e.g., 'make it brighter', 'now add shadows').",
        "details": "Build:\n1. POST /api/conversation/start - Start editing session\n2. POST /api/conversation/:id/continue - Refine previous result\n3. GET /api/conversation/:id - Get conversation history\n\nTechnical:\n- Track conversation chains (parentGenerationId)\n- Use last output as next input\n- Each iteration costs 100 tokens\n- Show version history (v1, v2, v3...)\n- Link all generations in conversation",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [],
        "priority": "low",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Admin Panel & Management",
        "description": "Build admin dashboard and tools for managing users, viewing stats, and manually adding tokens to user accounts.",
        "details": "Build:\n1. GET /api/admin/stats - Platform statistics\n   - Total users, active users\n   - Total generations, tokens distributed/used\n   - Average tokens per user\n2. GET /api/admin/users - User management with search\n3. Token top-up already in Feature 1\n\nAdd middleware:\n- Admin role verification\n- Audit logging for admin actions",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [],
        "priority": "low",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-10-25T08:23:46.343Z",
      "updated": "2025-10-25T08:27:33.206Z",
      "description": "Tasks for core-features context"
    }
  }
}